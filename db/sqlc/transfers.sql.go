// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfers.sql

package backend_masterclass

import (
	"context"
	"database/sql"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    from_account, to_account, amout
) VALUES (
    $1, $2, $3
)
RETURNING id, from_account, to_account, amout, created_at
`

type CreateTransferParams struct {
	FromAccount sql.NullInt64
	ToAccount   sql.NullInt64
	Amout       int64
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccount, arg.ToAccount, arg.Amout)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.Amout,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account, to_account, amout, created_at FROM transfers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfers
	err := row.Scan(
		&i.ID,
		&i.FromAccount,
		&i.ToAccount,
		&i.Amout,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfers = `-- name: GetTransfers :many
SELECT id, from_account, to_account, amout, created_at FROM transfers 
WHERE from_account = $1 OR to_account = $2
ORDER BY created_at
LIMIT $3
OFFSET $4
`

type GetTransfersParams struct {
	FromAccount sql.NullInt64
	ToAccount   sql.NullInt64
	Limit       int32
	Offset      int32
}

func (q *Queries) GetTransfers(ctx context.Context, arg GetTransfersParams) ([]Transfers, error) {
	rows, err := q.db.QueryContext(ctx, getTransfers,
		arg.FromAccount,
		arg.ToAccount,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfers
	for rows.Next() {
		var i Transfers
		if err := rows.Scan(
			&i.ID,
			&i.FromAccount,
			&i.ToAccount,
			&i.Amout,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
